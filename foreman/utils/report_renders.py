from cStringIO import StringIO

try:
    from PyRTF import *

    rtf_import = True
except ImportError:
    rtf_import = False

try:
    from xhtml2pdf import pisa

    pdf_import = True
except ImportError:
    pdf_import = False

from os import path, remove
from shutil import move
from datetime import datetime
import csv

# local imports
from ..utils.utils import ROOT_DIR
from ..model import ForemanOptions, CaseStatus


def open_file(file_location):
    return file(file_location, 'w')


def create_rtf(case, histories):
    doc = Document()
    ss = doc.StyleSheet
    section = Section(landscape=True)
    doc.Sections.append(section)

    title = 'Case Report for {}'.format(case.case_name)

    logo = path.join(ROOT_DIR, 'static', 'images', 'logo', 'logortf.png')
    image = Image(logo)
    section.Header.append(image)
    section.Header.append(title)
    today = ForemanOptions.get_date(datetime.now())
    section.Footer.append('Case Report for {} generated by Foreman on {}'.format(case.case_name, today))

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append(title)
    section.append(p)

    section = Section(break_type=3, landscape=True)
    doc.Sections.append(section)

    case_history, task_histories, evidence_histories = histories

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Case Summary')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Case created: \t\t\t{}'.format(case.date_created))
    section.append(p)
    if case.status == CaseStatus.REJECTED:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Date Rejected: \t\t\t{}'.format(case.authorised.date))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Rejection Justification: \t\t{}'.format(case.authorised.reason))
        section.append(p)
    elif case.status != CaseStatus.REJECTED or case.status != CaseStatus.PENDING:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Date Approved: \t\t\t{}'.format(case.authorised.date))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Authorisation Justification: \t\t{}'.format(case.authorised.reason))
        section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Authoriser: \t\t\t\t{}'.format(case.authoriser.fullname))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Requester: \t\t\t\t{}'.format(case.requester.fullname if case.requester else "None assigned"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Status: \t\t\t{}'.format(case.status))
    section.append(p)
    if case.status != CaseStatus.PENDING:
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Current Status Date:\t\t\t{}'.format(case.get_status().date))
        section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Reference: \t\t\t\t{}'.format(case.reference))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Case Files Location: \t\t\t' + r'{}'.format(case.location if case.location else "Not specified"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Private Case: \t\t\t\t{}'.format("Yes" if case.private else "No"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Priority: \t\t\t{}'.format(case.case_priority))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Classification: \t\t{}'.format(case.classification))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Current Type: \t\t\t{}'.format(case.case_type))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    case_links = case.get_links()
    links = ", ".join([c.case_name for c in case_links])
    p.append('Cases Linked To: \t\t\t{}'.format(links if len(case_links) > 0 else "No links"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    case_links = case.get_from_links()
    links = ", ".join([c.case_name for c in case_links])
    p.append('Cases Linked From: \t\t\t{}'.format(links if len(case_links) > 0 else "No links"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Principle Case Manager: \t\t{}'.format(
        case.principle_case_manager.fullname if case.principle_case_manager else "None assigned"))
    section.append(p)
    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('Secondary Case Manager: \t\t{}'.format(
        case.secondary_case_manager.fullname if case.secondary_case_manager else "None assigned"))
    section.append(p)

    section = Section(break_type=3, landscape=True)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Task Summary')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Evidence Summary')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    if len(case.evidence) == 0:
        p.append('No evidence has been added.')
        section.append(p)
    else:
        section.append(p)
        t = Table(2000,2000,2000,2000,2000)
        headers = ["Reference", "Date Added", "Type", "User", "Current Status"]
        row = []
        for h in headers:
            row.append(Cell(h))
        t.append(*row)
        row = []
        for evidence in case.evidence:
            current_status = "In storage" if evidence.current_status.check_in is True else "Checked out by {}".format(
                evidence.current_status.user.fullname)
            entries = [rtf_encode(evidence.reference), evidence.date, rtf_encode(evidence.type), evidence.user.fullname,
                       current_status]
            for e in entries:
                row.append(Cell(e))
            t.append(*row)
            row = []
        section.append(t)

    section = Section(break_type=3, landscape=True)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Task Details')
    section.append(p)

    for task in case.tasks:
        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Task Details: {}'.format(task.task_name))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Created: \t\t\t{}'.format(task.date_created))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Status: \t\t\t\t{}'.format(task.status))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Type: \t\t\t\t{}'.format(task.task_type))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Task Files Location: \t\t\t{}'.format(task.location if task.location else "Not specified"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Principle Forensic Investigator: \t{}'.format(
            task.principle_investigator.fullname if task.principle_investigator else "None assigned"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Secondary Forensic Investigator: \t{}'.format(
            task.secondary_investigator.fullname if task.secondary_investigator else "None assigned"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Principle QA Investigator: \t\t{}'.format(
            task.principle_QA.fullname if task.principle_QA else "None assigned"))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Secondary QA Investigator: \t\t{}'.format(
            task.secondary_QA.fullname if task.secondary_QA else "None assigned"))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Task {} Notes'.format(task.task_name))
        section.append(p)

        if len(task.notes) == 0:
            p = Paragraph(ss.ParagraphStyles.Normal)
            p.append('No notes written.')
            section.append(p)

        for note in task.notes:
            p = Paragraph(ss.ParagraphStyles.Normal)
            p.append('Date: {}\t\tAuthor: {}'.format(note.date, note.author.fullname))
            section.append(p)

            body = rtf_encode(note.note)
            paragraphs = body.split("\n")
            for para in paragraphs:
                p = Paragraph(ss.ParagraphStyles.Normal)
                p.append(para)
                section.append(p)

        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Task {} Uploads'.format(task.task_name))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        if len(task.task_uploads) == 0:
            p.append('No files have been uploaded.')
            section.append(p)
        else:
            section.append(p)
            t = Table(1000,1000,2000,1500,2000,2000)
            headers = ["File Title", "Date Uploaded", "File Hash", "Uploader", "Notes", "File Location"]
            row = []
            for h in headers:
                row.append(Cell(h))
            t.append(*row)
            row = []
            for photo in task.task_uploads:
                entries = [rtf_encode(photo.file_title), photo.date, rtf_encode(photo.file_hash),
                           photo.uploader.fullname, rtf_encode(photo.file_note),
                           rtf_encode(photo.file_path)]
                for e in entries:
                    row.append(Cell(e))
                t.append(*row)
                row = []
            section.append(t)

        section = Section(break_type=3, landscape=True)
        doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Evidence Details')
    section.append(p)

    for evidence in case.evidence:
        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Evidence Details: {}'.format(evidence.reference))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Evidence Added: \t\t\t{}'.format(evidence.date))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Evidence Type: \t\t\t{}'.format(evidence.type))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('User Who Added Evidence: \t\t{}'.format(evidence.user.fullname))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Originator: \t\t\t\t{}'.format(evidence.originator))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Bag Number: \t\t\t\t{}'.format(evidence.evidence_bag_number))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Location Seized From: \t\t{}'.format(evidence.location))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Current Status: \t\t\t{}'.format(
            "In storage" if evidence.current_status.check_in is True else "Checked out by {}".format(
                evidence.current_status.user.fullname)))
        section.append(p)
        p = Paragraph(ss.ParagraphStyles.Normal)
        p.append('Comments: \t\t\t\t{}'.format(evidence.comment))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Chain of Custody for {}'.format(evidence.reference))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Evidence {} Uploads'.format(evidence.reference))
        section.append(p)

        p = Paragraph(ss.ParagraphStyles.Normal)
        if len(evidence.evidence_photos) == 0:
            p.append('No photos have been uploaded.')
            section.append(p)
        else:
            section.append(p)
            t = Table(1000,1000,2000,1500,2000,2000)
            headers = ["File Title", "Date Uploaded", "File Hash", "Uploader", "Notes", "File Location"]
            row = []
            for h in headers:
                row.append(Cell(h))
            t.append(*row)
            row = []
            for photo in evidence.evidence_photos:
                entries = [rtf_encode(photo.file_title), photo.date, rtf_encode(photo.file_hash),
                           photo.uploader.fullname, rtf_encode(photo.file_note),
                           rtf_encode(photo.file_path)]
                for e in entries:
                    row.append(Cell(e))
                t.append(*row)
                row = []
            section.append(t)

        section = Section(break_type=3, landscape=True)
        doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Audit Logs')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Heading2)
    p.append('Case Audit Log')
    section.append(p)

    section = Section(break_type=3, landscape=True)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading2)
    p.append('Task Audit Log')
    section.append(p)

    for task in case.tasks:
        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Task Audit Log: {}'.format(task.task_name))
        section.append(p)

    section = Section(break_type=3, landscape=True)
    doc.Sections.append(section)

    p = Paragraph(ss.ParagraphStyles.Heading2)
    p.append('Evidence Audit Log')
    section.append(p)

    for evidence in case.evidence:
        p = Paragraph(ss.ParagraphStyles.Heading2)
        p.append('Evidence Audit Log: {}'.format(evidence.reference))
        section.append(p)

    return doc


def rtf_encode_char(unichar):
    code = ord(unichar)
    if code < 128:
        return str(unichar)
    return '\\u' + str(code if code <= 32767 else code - 65536) + '?'


def rtf_encode(unistr):
    return ''.join(rtf_encode_char(c) for c in unistr)


def render_rtf_report(case, histories, render_file=None):
    if render_file is None:
        render_file = StringIO()

    if rtf_import:
        dr = Renderer()
        doc = create_rtf(case, histories)
        dr.Write(doc, render_file)
        return render_file
    else:
        return None


def convert_notes_into_html(notes):
    logo = path.abspath(path.join(ROOT_DIR, 'static', 'images', 'logo', 'logo.jpg'))
    name = '{} {} Notes'.format(notes[0].task.case.case_name, notes[0].task.task_name)

    html = u'''<html>
    <head>
    <style>
        @page {{
            size: a4 portrait;
            background-image: url('{}');
            font-size: 200%;
            @frame header_frame {{           /* Static Frame */
                -pdf-frame-content: header_content;
                left: 50pt; width: 512pt; top: 50pt; height: 40pt;
            }}
            @frame content_frame {{          /* Content Frame */
                left: 50pt; width: 512pt; top: 90pt; height: 632pt;

            }}
            @frame footer_frame {{           /* Another static Frame */
                -pdf-frame-content: footer_content;
                left: 50pt; width: 512pt; top: 772pt; height: 20pt;
            }}
        }}
    </style>
    </head>
    <body>
    <div id="header_content">{}</div>
    <div id="footer_content">
        Created by Foreman - page <pdf:pagenumber>
    </div>
    <h1>{}</h1>'''.format(logo, name, name)
    for note in notes:
        html += u"<h2>{} - {}</h2>".format(note.date, note.author.fullname, )
        paragraphs = note.note.split("\n")
        for para in paragraphs:
            html += u"<p>{}</p>".format(para)
        html += u"<p>Hash of note: {}</p>".format(note.hash)
    html += u"</body></html>"

    return html


def render_pdf_report(case, histories, render_file=None):
    return None

    if render_file is None:
        render_file = StringIO()

    if pdf_import:
        html = convert_notes_into_html(notes)
        pisa.CreatePDF(html.encode("utf-8"), render_file)
        return render_file
    else:
        return None